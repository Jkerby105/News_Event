{"ast":null,"code":"var _jsxFileName = \"/Users/jeanauguste/Downloads/013-adv-starting-project/frontend/src/page/Events.js\";\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isLoading && fetchedEvents && /*#__PURE__*/_jsxDEV(EventsList, {\n      events: fetchedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 39\n    }, this)\n  }, void 0, false);\n}\n_c = EventsPage;\nexport default EventsPage;\n\n// useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         console.log(resData);\n//         console.log(resData.events);\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","children","isLoading","fetchedEvents","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeanauguste/Downloads/013-adv-starting-project/frontend/src/page/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n     \n\n  return (\n    <>\n      {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n    </>\n  );\n}\n\nexport default EventsPage;\n\n\n\n\n// useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         console.log(resData);\n//         console.log(resData.events);\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAGpB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,EACG,CAACC,SAAS,IAAIC,aAAa,iBAAIN,OAAA,CAACF,UAAU;MAACS,MAAM,EAAED;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACrE,CAAC;AAEP;AAACC,EAAA,GARQT,UAAU;AAUnB,eAAeA,UAAU;;AAKzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}